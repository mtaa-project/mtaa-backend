"""update Listing description length

Revision ID: 5cacab102fa7
Revises: 5204991a03b6
Create Date: 2025-05-04 14:08:42.374696

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5cacab102fa7"
down_revision: Union[str, None] = "5204991a03b6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "listings",
        "description",
        existing_type=sa.VARCHAR(length=255),
        type_=sqlmodel.sql.sqltypes.AutoString(length=5000),
        existing_nullable=False,
    )
    op.alter_column(
        "rentListings",
        "description",
        existing_type=sa.VARCHAR(length=255),
        type_=sqlmodel.sql.sqltypes.AutoString(length=5000),
        existing_nullable=False,
    )
    op.alter_column(
        "rentListings",
        "end_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "saleListings",
        "description",
        existing_type=sa.VARCHAR(length=255),
        type_=sqlmodel.sql.sqltypes.AutoString(length=5000),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # Truncate long descriptions so the length check passes
    for table in ("listings", "rentListings", "saleListings"):
        op.execute(
            sa.text(
                f"""
                UPDATE "{table}"
                SET description = substring(description from 1 for 255)
                WHERE length(description) > 255
                """
            )
        )

    # now shrink the column
    for table in ("listings", "rentListings", "saleListings"):
        op.alter_column(
            table,
            "description",
            existing_type=sqlmodel.sql.sqltypes.AutoString(length=5000),
            type_=sa.VARCHAR(length=255),
            existing_nullable=False,
        )

    # rentListings.end_date reverts as before
    op.alter_column(
        "rentListings",
        "end_date",
        existing_type=sa.TIMESTAMP(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
